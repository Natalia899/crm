[{"C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\index.js":"1","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\App.js":"2","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\reportWebVitals.js":"3","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\actions\\Actions.js":"4","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\clients\\Clients.js":"5","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\analytics\\Analytics.js":"6","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\NavBar.js":"7","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\stores\\CRMStores.js":"8","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\actions\\AddClient.js":"9","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\actions\\UpdateClient.js":"10","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\stores\\updateStore.js":"11","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\analytics\\charts\\TopEmployeesChart.js":"12","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\analytics\\badges\\Badges.js":"13","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\analytics\\badges\\Badge.js":"14"},{"size":791,"mtime":1610449941044,"results":"15","hashOfConfig":"16"},{"size":658,"mtime":1610287522155,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":1789,"mtime":1610481960689,"results":"19","hashOfConfig":"16"},{"size":3739,"mtime":1610527900098,"results":"20","hashOfConfig":"16"},{"size":488,"mtime":1612012124597,"results":"21","hashOfConfig":"16"},{"size":1126,"mtime":1610664809641,"results":"22","hashOfConfig":"16"},{"size":3140,"mtime":1612053906074,"results":"23","hashOfConfig":"16"},{"size":5696,"mtime":1612019492295,"results":"24","hashOfConfig":"16"},{"size":1948,"mtime":1610497936991,"results":"25","hashOfConfig":"16"},{"size":1194,"mtime":1610490887579,"results":"26","hashOfConfig":"16"},{"size":275,"mtime":1610413765067,"results":"27","hashOfConfig":"16"},{"size":659,"mtime":1612053941854,"results":"28","hashOfConfig":"16"},{"size":798,"mtime":1612053921876,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1tm8x67",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\index.js",[],["66","67"],"C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\App.js",["68"],"import './App.css';\nimport React from 'react';\nimport NavBar from './components/NavBar';\nimport Clients from './components/clients/Clients';\nimport Actions from './components/actions/Actions';\nimport Analytics from './components/analytics/Analytics';\n\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\n\n\nexport default function App() {\n  return (\n    <Router>\n      <div className=\"App\">\n      <NavBar />\n      <Route path=\"/\" exact render={() => <Clients />} />\n      <Route path=\"/actions\" exact render={() => <Actions />} />\n      <Route path=\"/analytics\" exact render={() => <Analytics />} />\n\n\n\n      </div>\n    </Router>\n  );\n}\n\n\n","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\reportWebVitals.js",[],"C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\actions\\Actions.js",["69","70"],"import React, { useState, useEffect } from 'react'\r\nimport AddClient from './AddClient';\r\nimport UpdateClient from './UpdateClient';\r\nimport { inject, observer } from 'mobx-react'\r\n\r\nconst Actions = inject(\"CRMStores\", \"UpdateStores\")(observer((props) => {\r\n\r\n  return (\r\n    <div className='actionsContainer'>\r\n      <AddClient />\r\n      <UpdateClient />\r\n      {/* <AddClient name={'first'} type={'text'} placeholder={'First Name'} />\r\n      <AddClient name={'last'} type={'text'} placeholder={'Last Name'} />\r\n      <AddClient name={'email'} type={'text'} placeholder={'Email'} />\r\n      <AddClient name={'date'} type={'date'} placeholder={'Date'} />\r\n      <select className=\"dropdown\">\r\n      <option selected hidden>Select Country</option>\r\n        {countries.map(country => <option name='country' onChange={props.UpdateStores.handleInput} value={props.UpdateStores.country}>{country}</option>)}\r\n      </select>\r\n      <select className=\"dropdown\" >\r\n      <option selected hidden>Select Owner</option>\r\n        {props.CRMStores.owners && props.CRMStores.owners\r\n          .map(owner => <option name='owner' onChange={props.UpdateStores.handleInput} value={props.UpdateStores.owner}>{owner.owner}</option>)}\r\n      </select> */}\r\n\r\n\r\n      {/* <input type=\"checkbox\" onChange={handleCheckBox} />\r\n            <label>Sold Product</label>\r\n\r\n            <UpdateClient selectValue={country_id} name='country_id' data={props.crmStore.countries} placeholder={'Country'} />\r\n            <UpdateClient selectValue={owner_id} name='owner_id' data={props.crmStore.owners} placeholder={'Employee'} />\r\n            <UpdateClient selectValue={email_type_id} name='email_type_id' data={props.crmStore.emailTypes} placeholder={'Email Type'} /> */}\r\n    </div>\r\n  )\r\n}))\r\n\r\nexport default Actions;","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\clients\\Clients.js",["71","72"],"import React, { useState, useEffect } from 'react'\r\nimport { inject, observer } from 'mobx-react'\r\n\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport { Table, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core'\r\n\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nfunction createData(surname, name, country, firstContact, email, sold, owner) {\r\n  return { surname, name, country, firstContact, email, sold, owner };\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Clients = inject(\"CRMStores\")(observer((props) => {\r\n\r\n  const [relevantClients, setRelevantClients] = useState([...props.CRMStores.clients])\r\n  const [input, setInput] = useState('')\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await props.CRMStores.getClients()\r\n      setRelevantClients(props.CRMStores.clients)\r\n      console.log(relevantClients)\r\n    }\r\n    fetchData()\r\n  }, [])\r\n\r\n\r\n\r\n\r\n  // not working on input delete\r\n\r\n  useEffect(() => {\r\n    let tempList = props.CRMStores.clients.filter(c => {\r\n      return c.last.toLowerCase().includes(input.toLowerCase())\r\n    })\r\n    setRelevantClients(tempList)\r\n  }, [input.length])\r\n\r\n  const handleChange = (event) => setInput(event.target.value)\r\n\r\n\r\n  //props.CRMStores.clients.length\r\n\r\n  const rows = relevantClients && relevantClients.map(c => {\r\n    return (createData(\r\n      c.last, c.first, c.country, c.date, c.email, c.sold, c.owner))\r\n  })\r\n  // const rows = props.CRMStores.clients.length && props.CRMStores.clients.map(c => {\r\n  //   return (createData(\r\n  //     c.last, c.first, c.country, c.date, c.email, c.sold, c.owner))\r\n  // })\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <input className='findClient' value={input} onChange={handleChange} placeholder='name'></input>\r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"customized table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell align=\"center\">Surname</StyledTableCell>\r\n              <StyledTableCell align=\"center\">Name</StyledTableCell>\r\n              <StyledTableCell align=\"center\">Country</StyledTableCell>\r\n              <StyledTableCell align=\"center\">First Contact</StyledTableCell>\r\n              <StyledTableCell align=\"center\">Email</StyledTableCell>\r\n              <StyledTableCell align=\"center\">Sold</StyledTableCell>\r\n              <StyledTableCell align=\"center\">Owner</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.length && rows.map((row) => (\r\n              <StyledTableRow >\r\n                <StyledTableCell align=\"left\">{row.surname}</StyledTableCell>\r\n                <StyledTableCell align=\"left\">{row.name}</StyledTableCell>\r\n                <StyledTableCell align=\"left\">{row.country}</StyledTableCell>\r\n                <StyledTableCell align=\"left\">{row.firstContact}</StyledTableCell>\r\n                <StyledTableCell align=\"left\">{row.email}</StyledTableCell>\r\n                <StyledTableCell align=\"left\">{row.sold}</StyledTableCell>\r\n                <StyledTableCell align=\"left\">{row.owner}</StyledTableCell>\r\n              </StyledTableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  )\r\n}))\r\n\r\nexport default Clients\r\n","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\analytics\\Analytics.js",[],"C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\NavBar.js",["73","74"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        flexGrow: 1,\r\n    \r\n    },\r\n});\r\n\r\nexport default function NavBar() {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Tabs\r\n                value={value}\r\n                onChange={handleChange}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n                centered\r\n            >\r\n                <Tab label=\"Clients\" component={Link} to={\"/\"} />\r\n                <Tab label=\"Actions\" component={Link} to={\"/actions\"} />\r\n                <Tab label=\"Analytics\" component={Link} to={\"/analytics\"} />\r\n            </Tabs>\r\n        </Paper>\r\n    );\r\n}","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\stores\\CRMStores.js",["75","76","77","78"],"C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\actions\\AddClient.js",["79"],"import React, { useState, useEffect } from 'react'\r\nimport 'materialize-css';\r\nimport { inject, observer } from 'mobx-react'\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst AddClient = inject(\"CRMStores\", \"UpdateStores\")(observer((props) => {\r\n\r\n\r\n    const countries = [\"Afghanistan\", \"Albania\", \"Algeria\", \"American Samoa\", \"Andorra\", \"Angola\",\r\n        \"Anguilla\", \"Antarctica\", \"Antigua and Barbuda\", \"Argentina\", \"Armenia\", \"Aruba\",\r\n        \"Australia\", \"Austria\", \"Azerbaijan\", \"Bahamas\", \"Bahrain\", \"Bangladesh\", \"Barbados\",\r\n        \"Belarus\", \"Belgium\", \"Belize\", \"Benin\", \"Bermuda\", \"Bhutan\", \"Bolivia\",\r\n        \"Bosnia and Herzegowina\", \"Botswana\", \"Bouvet Island\", \"Brazil\", \"British Indian Ocean Territory\", \"Brunei Darussalam\", \"Bulgaria\", \"Burkina Faso\", \"Burundi\", \"Cambodia\", \"Cameroon\", \"Canada\", \"Cape Verde\", \"Cayman Islands\", \"Central African Republic\", \"Chad\", \"Chile\", \"China\", \"Christmas Island\", \"Cocos (Keeling) Islands\", \"Colombia\", \"Comoros\", \"Congo\", \"Congo, the Democratic Republic of the\", \"Cook Islands\", \"Costa Rica\", \"Cote d'Ivoire\", \"Croatia (Hrvatska)\", \"Cuba\", \"Cyprus\", \"Czech Republic\", \"Denmark\", \"Djibouti\", \"Dominica\", \"Dominican Republic\", \"East Timor\", \"Ecuador\", \"Egypt\", \"El Salvador\", \"Equatorial Guinea\", \"Eritrea\", \"Estonia\", \"Ethiopia\", \"Falkland Islands (Malvinas)\", \"Faroe Islands\", \"Fiji\", \"Finland\", \"France\", \"France Metropolitan\", \"French Guiana\", \"French Polynesia\", \"French Southern Territories\", \"Gabon\", \"Gambia\", \"Georgia\", \"Germany\", \"Ghana\", \"Gibraltar\", \"Greece\", \"Greenland\", \"Grenada\", \"Guadeloupe\", \"Guam\", \"Guatemala\", \"Guinea\", \"Guinea-Bissau\", \"Guyana\", \"Haiti\", \"Heard and Mc Donald Islands\", \"Holy See (Vatican City State)\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"Iceland\", \"India\", \"Indonesia\", \"Iran (Islamic Republic of)\", \"Iraq\", \"Ireland\", \"Israel\", \"Italy\", \"Jamaica\", \"Japan\", \"Jordan\", \"Kazakhstan\", \"Kenya\", \"Kiribati\", \"Korea, Democratic People's Republic of\", \"Korea, Republic of\", \"Kuwait\", \"Kyrgyzstan\", \"Lao, People's Democratic Republic\", \"Latvia\", \"Lebanon\", \"Lesotho\", \"Liberia\", \"Libyan Arab Jamahiriya\", \"Liechtenstein\", \"Lithuania\", \"Luxembourg\", \"Macau\", \"Macedonia, The Former Yugoslav Republic of\", \"Madagascar\", \"Malawi\", \"Malaysia\", \"Maldives\", \"Mali\", \"Malta\", \"Marshall Islands\", \"Martinique\", \"Mauritania\", \"Mauritius\", \"Mayotte\", \"Mexico\", \"Micronesia, Federated States of\", \"Moldova, Republic of\", \"Monaco\", \"Mongolia\", \"Montserrat\", \"Morocco\", \"Mozambique\", \"Myanmar\", \"Namibia\", \"Nauru\", \"Nepal\", \"Netherlands\", \"Netherlands Antilles\", \"New Caledonia\", \"New Zealand\", \"Nicaragua\", \"Niger\", \"Nigeria\", \"Niue\", \"Norfolk Island\", \"Northern Mariana Islands\", \"Norway\", \"Oman\", \"Pakistan\", \"Palau\", \"Panama\", \"Papua New Guinea\", \"Paraguay\", \"Peru\", \"Philippines\", \"Pitcairn\", \"Poland\", \"Portugal\", \"Puerto Rico\", \"Qatar\", \"Reunion\", \"Romania\", \"Russian Federation\", \"Rwanda\", \"Saint Kitts and Nevis\", \"Saint Lucia\", \"Saint Vincent and the Grenadines\", \"Samoa\", \"San Marino\", \"Sao Tome and Principe\", \"Saudi Arabia\", \"Senegal\", \"Seychelles\", \"Sierra Leone\", \"Singapore\", \"Slovakia (Slovak Republic)\", \"Slovenia\", \"Solomon Islands\", \"Somalia\", \"South Africa\", \"South Georgia and the South Sandwich Islands\", \"Spain\", \"Sri Lanka\", \"St. Helena\", \"St. Pierre and Miquelon\", \"Sudan\", \"Suriname\", \"Svalbard and Jan Mayen Islands\", \"Swaziland\", \"Sweden\", \"Switzerland\", \"Syrian Arab Republic\", \"Taiwan, Province of China\", \"Tajikistan\", \"Tanzania, United Republic of\", \"Thailand\", \"Togo\", \"Tokelau\", \"Tonga\", \"Trinidad and Tobago\", \"Tunisia\", \"Turkey\", \"Turkmenistan\", \"Turks and Caicos Islands\", \"Tuvalu\", \"Uganda\", \"Ukraine\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"United States Minor Outlying Islands\", \"Uruguay\", \"Uzbekistan\", \"Vanuatu\", \"Venezuela\", \"Vietnam\", \"Virgin Islands (British)\", \"Virgin Islands (U.S.)\", \"Wallis and Futuna Islands\", \"Western Sahara\", \"Yemen\", \"Yugoslavia\", \"Zambia\", \"Zimbabwe\"]\r\n\r\n    useEffect(() => {\r\n        props.CRMStores.getOwners()\r\n        console.log(props.CRMStores.owners)\r\n    }, [props.CRMStores])\r\n\r\n    let handleInput = props.UpdateStores.handleInput;\r\n    let data = props.UpdateStores\r\n\r\n    const addClient = () => {\r\n        console.log(data.owner);\r\n        let newClient = {\r\n            last: data.last, first: data.first, email: data.email,\r\n            sold: 0, date: data.date, owner: data.owner, country: data.country, email_type: null\r\n        }\r\n        props.CRMStores.addClient(newClient)\r\n    }\r\n    return (\r\n        <div className='addClientInputs'>\r\n            <input name={'first'} type={'text'} onChange={handleInput} placeholder={'First Name'} required />\r\n            <input name={'last'} type={'text'} onChange={handleInput} placeholder={'Last Name'} required />\r\n            <input name={'email'} type={'text'} onChange={handleInput} placeholder={'Email'} required />\r\n            <input name={'date'} type={'date'} onChange={handleInput} placeholder={'Date'} required />\r\n            <select onChange={handleInput} name={'country'} className=\"dropdown\">\r\n                <option selected hidden>Select Country</option>\r\n                {countries.map(country => <option value={country} >{country}</option>)}\r\n            </select>\r\n            <select name={'owner'} onChange={handleInput} className=\"dropdown\" >\r\n                <option selected hidden>Select Owner</option>\r\n                {props.CRMStores.owners && props.CRMStores.owners\r\n                    .map(owner => <option value={owner.owner} >{owner.owner}</option>)}\r\n            </select>\r\n            <Button variant=\"contained\" onClick={addClient}>Add new client</Button>\r\n        </div>\r\n    )\r\n}\r\n))\r\n\r\nexport default AddClient;","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\actions\\UpdateClient.js",["80"],"import React, { useState, useEffect } from 'react'\r\nimport { inject, observer } from 'mobx-react'\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst UpdateClient = inject(\"CRMStores\", \"UpdateStores\")(observer((props) => {\r\n\r\n  useEffect(() => {\r\n    props.CRMStores.getOwners()\r\n    props.CRMStores.getEmailTypes()\r\n    console.log(props.CRMStores.emailTypes);\r\n  }, [props.CRMStores])\r\n  let handleInput = props.UpdateStores.handleInput;\r\n\r\n  const updateEmailType = () => {\r\n    let update = { tableName: 'email_type', newValue: props.UpdateStores.emailType }\r\n    props.CRMStores.updateEmailType(props.UpdateStores.last, update)\r\n  }\r\n\r\n  const updateOwner = () => {\r\n    let update = { tableName: 'owner', newValue: props.UpdateStores.owner }\r\n    props.CRMStores.updateOwner(props.UpdateStores.last, update)\r\n  }\r\n\r\n  const updateSold = () => {\r\n    let update = { tableName: 'sold', newValue: 1 }\r\n    props.CRMStores.updateOwner(props.UpdateStores.last, update)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input name=\"last\" onChange={handleInput} placeholder='name' />\r\n      <select name='owner' onChange={handleInput} className=\"dropdown\" >\r\n        <option selected hidden>Transfer ownership to:</option>\r\n        {props.CRMStores.owners && props.CRMStores.owners\r\n          .map(owner => <option >{owner.owner}</option>)}\r\n      </select>\r\n      <Button onClick={updateOwner} variant=\"contained\">Transfer</Button>\r\n\r\n      <div>\r\n        <select name='emailType' onChange={handleInput} className=\"dropdown\" >\r\n          <option selected hidden> Send email: </option>\r\n          {props.CRMStores.emailTypes && props.CRMStores.emailTypes\r\n            .map(e => <option >{e.email_type}</option>)}\r\n        </select>\r\n        <Button onClick={updateEmailType} variant=\"contained\">Send</Button>\r\n      </div>\r\n      <Button onClick={updateSold} variant=\"contained\">Declare sold</Button>\r\n    </div>\r\n  )\r\n}))\r\n\r\nexport default UpdateClient;","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\stores\\updateStore.js",["81"],"import { observable, computed, action, makeObservable } from 'mobx'\r\n\r\n\r\nexport class UpdateStores {\r\n    constructor() {\r\n            this.last = ''\r\n            this.first = ''\r\n            this.owner = ''\r\n            this.email = ''\r\n            this.date = ''\r\n            this.country = ''\r\n            this.emailType = ''\r\n            this.sold = false\r\n\r\n            makeObservable(this, {\r\n                last: observable,\r\n                first: observable,\r\n                owner: observable,\r\n                email: observable,\r\n                date: observable,\r\n                country: observable,\r\n                sold: observable,\r\n                handleInput: action\r\n            })\r\n    }\r\n    handleInput = ({ target }) => {\r\n        if (target.name === 'date') {\r\n            var array = (target.value).toString().split(/-/g);\r\n            array.push(array.shift());\r\n            this[target.name] = array.join('/')\r\n        } else {\r\n            this[target.name] = target.value\r\n            console.log(this.last);\r\n        }\r\n    }\r\n\r\n    // handleInput = ( {target} ) =>{\r\n    //     this[target.name] = target.value\r\n    //     console.log(this.owner);\r\n    // }\r\n\r\n}","C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\analytics\\charts\\TopEmployeesChart.js",[],"C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\analytics\\badges\\Badges.js",["82"],"C:\\Users\\natal\\code\\Elevation_Projects\\crm\\src\\components\\analytics\\badges\\Badge.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":8,"column":42,"nodeType":"89","messageId":"90","endLine":8,"endColumn":46},{"ruleId":"87","severity":1,"message":"91","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":25},{"ruleId":"87","severity":1,"message":"92","line":1,"column":27,"nodeType":"89","messageId":"90","endLine":1,"endColumn":36},{"ruleId":"93","severity":1,"message":"94","line":54,"column":6,"nodeType":"95","endLine":54,"endColumn":8,"suggestions":"96"},{"ruleId":"93","severity":1,"message":"97","line":66,"column":6,"nodeType":"95","endLine":66,"endColumn":20,"suggestions":"98"},{"ruleId":"87","severity":1,"message":"99","line":7,"column":27,"nodeType":"89","messageId":"90","endLine":7,"endColumn":33},{"ruleId":"87","severity":1,"message":"100","line":7,"column":35,"nodeType":"89","messageId":"90","endLine":7,"endColumn":40},{"ruleId":"101","severity":1,"message":"102","line":22,"column":13,"nodeType":"103","messageId":"104","endLine":22,"endColumn":22},{"ruleId":"105","severity":1,"message":"106","line":73,"column":76,"nodeType":"107","messageId":"104","endLine":73,"endColumn":78},{"ruleId":"105","severity":1,"message":"106","line":73,"column":113,"nodeType":"107","messageId":"104","endLine":73,"endColumn":115},{"ruleId":"105","severity":1,"message":"106","line":82,"column":48,"nodeType":"107","messageId":"104","endLine":82,"endColumn":50},{"ruleId":"87","severity":1,"message":"91","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":25},{"ruleId":"87","severity":1,"message":"91","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":25},{"ruleId":"87","severity":1,"message":"108","line":1,"column":22,"nodeType":"89","messageId":"90","endLine":1,"endColumn":30},{"ruleId":"93","severity":1,"message":"109","line":14,"column":8,"nodeType":"95","endLine":14,"endColumn":10,"suggestions":"110"},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.CRMStores' and 'relevantClients'. Either include them or remove the dependency array.","ArrayExpression",["113"],"React Hook useEffect has missing dependencies: 'input' and 'props.CRMStores.clients'. Either include them or remove the dependency array.",["114"],"'Router' is defined but never used.","'Route' is defined but never used.","no-dupe-keys","Duplicate key 'addClient'.","ObjectExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'computed' is defined but never used.","React Hook useEffect has a missing dependency: 'props.CRMStores'. Either include it or remove the dependency array.",["115"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [props.CRMStores, relevantClients]",{"range":"122","text":"123"},"Update the dependencies array to be: [input, input.length, props.CRMStores.clients]",{"range":"124","text":"125"},"Update the dependencies array to be: [props.CRMStores]",{"range":"126","text":"127"},[1323,1325],"[props.CRMStores, relevantClients]",[1563,1577],"[input, input.length, props.CRMStores.clients]",[490,492],"[props.CRMStores]"]